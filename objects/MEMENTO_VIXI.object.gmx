<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_cursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///remember that you're alive
count = 0;
savedx = x;
savedy = y;
hspd = 0;
vspd = 0;
selected = false;
selectedunit = undefined;
hput = 0;
vput = 0;
console_log("ikiteru yo!");
movementpoint = array_create(20);
tilemap = ds_grid_create(room_width/20, room_height/20);
bluesqx = array_create(room_width/20);
bluesqy = array_create(room_width/20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>c_input();
hput = right - left;
vput = down - up;

if savedx+hput*20 &gt; 0 &amp;&amp; savedx+hput*20 &lt; room_width {
    if left {
        savedx -= 20;
        hspd += 20;
    }
    if right {
        savedx += 20;
        hspd -= 20;
    }
}

if savedy+hput*20 &gt; 0 &amp;&amp; savedy+hput*20 &lt; room_height {
    if up {
        savedy -= 20;
        vspd += 20;
    }
    if down {
        savedy += 20;
        vspd -= 20;
    }
}
x = savedx;
y = savedy;
hspd = hspd/1.2;
vspd = vspd/1.2;
x += hspd;
y += vspd;

if select &amp;&amp; collision_point(savedx, savedy, o_unit, false, false) != noone &amp;&amp; selected = false {
    select = false;
    selected = true;
    selectedunit = collision_point(savedx, savedy, o_unit, false, false);
    selectedunit.x = savedx;
    selectedunit.y = savedy;
    c_bluesquares(selectedunit.mov, selectedunit.rng);
    
}
if selected = true &amp;&amp; back {
    selected = false;
    selectedunit = undefined;
}

if selected {
    
    if select {
        if ds_grid_get(tilemap, savedx/20, savedy/20) != 0 {
            selectedunit.hspd = selectedunit.x - savedx;
            selectedunit.vspd = selectedunit.y - savedy;
            selectedunit.savedx = savedx;
            selectedunit.savedy = savedy;
            select = false;
            selected = false;
            selectedunit = undefined;
            tilemap = ds_grid_create(room_width/20, room_height/20);
        }
    }
    if keyboard_check_pressed(vk_space) {
        /*console_log(bluepositionx);
        console_log(bluepositiony);*/
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>MEMENTO_VIXI</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if selected {
    /*var i;
    for (i=0; i&lt;array_length_1d(bluesqx); i++) {
        var j;
        for (j=0; j&lt;array_length_1d(bluesqy); j++) {
            if bluesqx[i] &gt; 0 || bluesqx[j] &gt; 0 {
                draw_sprite(s_blue, 0, i*20, j*20);
            }
        }
    }*/
    var i;
    for (i=0; i&lt;ds_grid_width(tilemap); i++) {
        var j;
        for (j=0; j&lt;ds_grid_height(tilemap); j++) {
            if ds_grid_get(tilemap, i, j) &gt; 0 {
                draw_sprite(s_blue, 0, i*20, j*20);
            }
        }
    }
    draw_line(selectedunit.x, selectedunit.y, x, y);
}

draw_set_colour(c_white)
ds_grid_draw(tilemap, savedx, savedy);

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
